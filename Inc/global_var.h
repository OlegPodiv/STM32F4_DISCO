/*
Хедер файл глобальных переменных

*/

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __GLOBAL_VAR_H
#define __GLOBAL_VAR_H

#ifdef __cplusplus
extern "C" {
#endif
//******************************************************************************
// Секция include: здесь подключаются заголовочные файлы используемых модулей
//******************************************************************************
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx_hal.h"
#include "main_module.h"
//******************************************************************************
// Секция определения констант
//******************************************************************************

//******************************************************************************
// Секция определения типов
//******************************************************************************
typedef struct
{
/*Th01*/double D3_pump; // Датчик температуры подачи. Включение циркуляц. насоса.Температура включения помпы(5-110*С)
/*Th02*/double Th02; // Датчик температуры обратки, для управления 3-х ходовым клапаном
/*Th03*/double D10_min; // Авария по температуре отходящих газов(режим выключено)
/*Th04*/double Th04; // Температура срабатывания протокола безопасности по защите бункера от возгорания(ДАТТ)
/*Th05*/double D10_max; // Температура перехода в аварию по температуре отходящих газов из режимов Рабочий, поддержание и Ожидание
/*Th06*/double D10_ignition; // Температура удавшегося розжига
/*Th07*/double D3_target; // Заданная температура теплоносителя которую стремится набрать котел.
/*Th08*/double D10_maintain; // Граничная температура отходящих газов для перехода в режим «Поддержание» она всегда больше Тн06
/*Th09*/double D6_target; // Заданная температура бойлера
/*Th10*/double D3_min; // Нижняя граница датчика температуры теплоносителя в подаче D3
/*Th11*/double D3_max; // Верхняя граница датчика температуры теплоносителя в подаче D3
/*Th12*/double D6_max; // Максимальная температура в бойлере (ГВС)D6
/*Th13*/double D10_work; // D10 Температура перехода в рабочий режим (отходящих газов)	
double D01;  // Гистерезис задаваемый от 0 до 10*С
double D02;  // Дельта температур для работы в автоматическом режиме. От 0 до 10*С	
double D04;  // Допустимая дельта температур для гистерезиса в контуре ГВС режим «Лето»
double D05;  // Превышение динамики повышения температуры обратки в заданном интервале времени. dT/dt	
} T_MENU_TEMPERATURE;

typedef struct
{
double T01; // Время полного открытия \закрытия трехходового клапана
double T02; // Время ожидания после срабатывания(шага) трехходового клапана
double T03; // Время тушения(Общее)
double T04; // Время включения шнека 2(горелки) в % от Т03
double T05; // Время розжига(основной розжиг) от 0 до 60 мин.
double T06; // Время предварительной подгрузки горелки. Не может быть больше Т05. 
							// Включается шнек горелки на время Т05, 
							// Шнек бункера включается с задержкой D03, на время Т05-D03
double T07; // Время работы шнека горелки в режиме Розжиг(основной)
double T08; // Время повторного розжига(общее)
double T09; // Время работы шнека бункера в режиме Повторный Розжиг, составляет % от Т10
double T10; // Время работы шнека горелки в режиме повторный розжиг
double T11; // Время работы шнека горелки в режиме «Рабочий», малая мощность. В % от «Р05»
double T12; // Время работы шнека2 в режиме «Рабочий», средняя  мощность. В % от «Р05»
double T13; // Время работы шнека2 в режиме «Рабочий», максимальная  мощность. В % от «Р05»
double T14; // Время работы шнека2 в режиме «Поддержание», максимальная  мощность. В % от «Р05»
double T15; // Время включения шнека горелки по протоколу тушения бункера, но не меньше чем время цикла Р05
double T16; // Время ожидания в Блокировке(от 10 до 900 сек)
double T17; // время работы автоочистки
double T18; // время работы золоудаления
double T19; // Время работы Aux 1
double T20; // Время работы Aux 2
double T21; // Время работы шнека горелки в режиме ожиния с поддержанием уровня горения
double T22; // Время работы шнека бункера с ожиданием и поддержанием уровня горения.
double T23; // Время разрешения на погрузку
double T24; // Время паузы
double T25; // Время разрешения на погрузку Время работы шнека бункера В режиме основной розжиг, составляет % от Т 07
double T26; // Время ожидания по сигналу с Д2
double T27; // время работы шнека бункера в %% от Т14
double T28; // время работы электромагнитного клапана К1
double T29; // время восстановления при превышении токов
double P05; // Время цикла(общее) Является сквозным для работы всех узлов и механизмов во всех режимах.
double P06; // цикл автоочистки верхнего теплообменника ( от 1 до 999 минут)
double P07; // цикл нижнего золоудаления( от 1 до 999 минут)
double P08; // цикл Aux 1 ( от 1 до 999 минут)
double P09; // цикл Aux 2 ( от 1 до 999 минут)
double D03; // Время задержки включения и опережения выключения шнека 1, 
							// относительно шнека 2 в режиме предзагрузки для розжига.(надо ли вводить во все режимы?)
double D06; // Задержка срабатывания шнека бункера по отношению к шнеку горелки в режиме ожидания при поддержании горения

} T_MENU_TIME;

typedef struct
{
uint8_t a;
uint8_t b;
}	T_BOILER_OPTIONS;

typedef enum
{
SUMMER,
WINTER	
} T_MENU_SEASON;	

//******************************************************************************
// Секция определения глобальных переменных
//******************************************************************************

//******************************************************************************
// Секция прототипов глобальных функций
//******************************************************************************
T_MENU_TEMPERATURE menu_temperature_init(void);
T_MENU_TIME menu_time_init(void);

void menu_temperature_save_eeprom(T_MENU_TEMPERATURE T);
T_MENU_TEMPERATURE menu_temperature_load_eeprom(void);

void menu_temperature_save_eeprom_pages(T_MENU_TEMPERATURE T);
T_MENU_TEMPERATURE menu_temperature_load_eeprom_pages(void);

void menu_time_save_eeprom(T_MENU_TIME MT);
T_MENU_TIME menu_time_load_eeprom(void);

void menu_time_save_eeprom_pages(T_MENU_TIME MT);
T_MENU_TIME menu_time_load_eeprom_pages(void);

void menu_season_save_eeprom(T_MENU_SEASON sea);
T_MENU_SEASON menu_season_load_eeprom(void);

void boiler_state_save_eeprom(T_BOILER_STATE B);
T_BOILER_STATE boiler_state_load_eeprom(void);

void last_event_save_eeprom(T_EVENT Ev);
T_EVENT last_event_load_eeprom(void);

void global_var_init(void);
void eeprom_comparing(T_MENU_TEMPERATURE t_eeprom,T_MENU_TIME mt_eeprom,T_MENU_TEMPERATURE temperatures,T_MENU_TIME times);
//******************************************************************************
// Секция определения макросов
//******************************************************************************
	
#ifdef __cplusplus
}
#endif

#endif /* __GLOBAL_VAR_H */

//******************************************************************************
// ENF OF FILE
//******************************************************************************

	

