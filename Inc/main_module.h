/*
Header file for user tasks FreeRTOS
*/
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_MODULE_H
#define __MAIN_MODULE_H

#ifdef __cplusplus
extern "C" {
#endif
//******************************************************************************
// Секция include: здесь подключаются заголовочные файлы используемых модулей
//******************************************************************************
#include <math.h>
#include <stdio.h>
#include "sensors.h"
//******************************************************************************
// Секция определения констант
//******************************************************************************
//#define MY_CONST 1

//******************************************************************************
// Секция определения типов
//******************************************************************************
// -------------------------- Список состояний котла ---------------------------
typedef enum
{
TURNED_OFF_STATE = 0x00U,			// состояние "Выключено, Совсем выключено"
START_READY_STATE,						// состояние "Выключено, готов к включению"	
SELF_TEST_STATE, 							// состояние "Самотестирование"
IGNITION_STATE,								// состояние "Розжиг"
STABILIZATION_STATE,					// состояние "Стабилизация"
WORKING_STATE,								// состояние "Рабочий"
MAINTAINING_STATE,						// состояние "Поддержание"
WAITING_STATE,								// состояние "Ожидание"
BLOCKING_STATE,								// состояние "Блокировка"	
CRASH_STATE										// состояние "Авария"	
} T_BOILER_STATE;
// -----------------------------------------------------------------------------
// -------------------------- Список генерируемых событий ----------------------
typedef enum
{
NO_EVENT = 0x00U,
ON_EVENT,
OFF_EVENT,
START_EVENT,
STOP_EVENT,	
POWER_LOSS_EVENT,
D1_ALARM_EVENT,
D2_ALARM_EVENT,
D4_ALARM_EVENT,
D8_ALARM_EVENT
} T_EVENT;
// -----------------------------------------------------------------------------

// -------------------------- Список возможных выходов вентилятора--------------
typedef enum
{
BurnerFan,				// Вентилятор горелки
SecondaryAirFan, 	// Вентилятор вторичного воздуха периферии
SuctionFan				// Вентилятор аспирации	
} T_FAN;	
// ---------------------- 
typedef struct
{
uint8_t enable;	// 0 - disable, 1 - enable
GPIO_TypeDef* GPIOx;
uint16_t GPIO_Pin;
GPIO_PinState PinStateActive;	
}	T_RELAY_OUTPUT;
// ------------------------------------------------------------------------
typedef struct
{
uint8_t enable;	
T_FAN fan;
} T_FAN_OUTPUT;
// --------------------------------------------------------------------------
typedef struct
{
T_FAN_OUTPUT BurnerFan;				// Вентилятор горелки
T_FAN_OUTPUT SecondaryAirFan; // Вентилятор вторичного воздуха периферии
T_FAN_OUTPUT SuctionFan;				// Вентилятор аспирации		
}	T_PWM_OUTPUTS;
// -------------------------- Список возможных выходов 0-1 ---------------------
typedef struct
{
T_RELAY_OUTPUT HopperAuger; 		// Шнек бункера ДАТТ, M1
T_RELAY_OUTPUT BurnerAuger; 		// Шнек горелки, M2
T_RELAY_OUTPUT AutoClean; 			// Автоочистка, M3
T_RELAY_OUTPUT AshRemove; 			// Золоудаление, M4
T_RELAY_OUTPUT Aux1; 						// Aux1, M5 
T_RELAY_OUTPUT Aux2; 						// Aux2, M6
T_RELAY_OUTPUT CirclePump; 			// Циркуляционный насос, N1
T_RELAY_OUTPUT HotWaterPump; 		// Насос ГВС, N2
T_RELAY_OUTPUT Ignition; 				// ТЭН - авторозжиг
T_RELAY_OUTPUT FireSafetyValve;	// Электромагн. клапан пожаробезопасности К1
T_RELAY_OUTPUT AlarmDry;				// Авария сухой контакт - выходной аварийный сигнал.	
} T_BIN_OUTPUTS;
// -----------------------------------------------------------------------------
// ------------------------ Список возможных шаговых выходов -------------------
typedef enum
{
DamperFan1Direction,	// Заслонка вентилятора В1 направление
DamperFan1Step,				// Заслонка вентилятора В1 шаг	
DamperFan2Direction,	// Заслонка вентилятора В2 направление
DamperFan2Step,				// Заслонка вентилятора В2 шаг	
ThreeWayValveDir,			// Трехходовой клапан направление
ThreeWayValveStep			// Трехходовой клапан шаг		
} T_STEPS_OUTPUT;	
// -----------------------------------------------------------------------------

//******************************************************************************
// Секция определения глобальных переменных
//******************************************************************************

//******************************************************************************
// Секция прототипов глобальных функций
//******************************************************************************
void boiler_init(void);
void boiler_step(void);
//******************************************************************************
// Секция определения макросов
//******************************************************************************
//#define MACRO1
//#define MACRO2
#ifdef __cplusplus
}
#endif

#endif /* __MAIN_MODULE_H */

